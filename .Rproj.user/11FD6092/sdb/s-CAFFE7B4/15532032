{
    "contents" : "library(lubridate)\nlibrary (rChoiceDialogs)\n###########################################################\n# VARIAVEIS A SEREM ALTERADAS DE ACORDO COM O AMBIENTE\n###########################################################\n# source(\"preferencias.R\")\ncarregarPrefs <- function (){\n  ###########################################################\n  ffmpeg <<- jchoose.files(default = carregarDir(\"ffmpeg\"), caption = \"Localizacao do ffmpeg\")\n  diretorioSaida <<- jchoose.dir(default = carregarDir(\"diretorioSaida\"), caption = \"Diretorio de saida\")\n  arquivoLista <<- jchoose.files(multi = F, caption = \"Arquivo lista.txt\", default = carregarDir(\"arquivoLista\"))\n  arquivoOrigem <<- jchoose.files(multi = F, caption = \"Arquivo de origem (filme)\", default = carregarDir(\"arquivoOrigem\"))\n  arquivoLegenda <<- jchoose.files(multi = F, caption = \"Arquivo de legenda combinado\", default = carregarDir(\"arquivoLegenda\"))\n  setwd(diretorioSaida)\n}\n\ncarregarLegenda <- function (){\n  legenda <- read.fwf (arquivoLegenda,\n                      widths= c(12, 12, 12, 3, 2, 4, 4, 4,1,1000), skip=18, fileEncoding=\"latin1\")\n  #head(legenda$V10)\n  legenda$V11 <- substr(legenda$V2, 1,11); legenda$V12 <- substr(legenda$V3, 1,11); \n  legenda$V2 = lubridate::hms(substr(legenda$V2, 1,11))\n  legenda$V3 = lubridate::hms(substr(legenda$V3, 1,11))\n  legenda$V10 = iconv(legenda$V10, to = \"UTF-8\", from=\"latin1\")\n  legenda$V10 = substr(legenda$V10, 4,length(legenda$V10))\n  legenda$V10 = gsub(\"\\n\",\" \",legenda$V10); \n  legenda$V10 = gsub(\"[?]\\\\N\",\" \",legenda$V10)\n  legenda$V10 = gsub(\"\\\\\\\\N\",\" \",legenda$V10)\n  return (legenda)\n}\n# Para ajudar a abstrair a mudan?a:\n#  =======  =========\n# ===============\n# o maior eh de quem?\n# pega o maior e chama pro menor, pra ver se tem algum texto diferente do que jah tem \n# se tiver, concatena e devolve\nlocalizarIntervalo <- function (tempo) {\n  colunas = c(2,3,4,10,11,12)\n  if (class(tempo) == \"numeric\") tempo = lubridate::seconds(tempo)\n  \n  retorno = legenda[(legenda$V2 <= tempo) & (legenda$V3 >= tempo), colunas]\n  if (nrow (retorno) == 1){ #tentar aumentar o tamanho - no inicio ou no fim? m?dia do inicio com o fim?\n    options(lubridate.verbose = FALSE)\n    media = (as.duration(retorno$V2)/eseconds(1) + as.duration(retorno$V3)/eseconds(1)) / 2\n    if (as.duration(tempo) != media) \n      retorno = localizarIntervalo(media)\n    options(lubridate.verbose = TRUE)\n  }\n  \n  #possivelmente unir a legenda seguinte menor SE uma ficar muito menor que outra\n  menor = ifelse (localizarMaior(retorno) == \"Bot\", \"Top\", \"Bot\")\n  maior = ifelse (localizarMaior(retorno) == \"Top\", \"Top\", \"Bot\")\n  tempoDoMaior = retorno[retorno$V4 == maior,2]\n  linha = localizarIntervaloSimples(tempoDoMaior, menor)\n  x = linha$V10\n  if (length(x) > 0  )\n    if (linha$V10 != (retorno[(retorno$V4 == menor),4])){\n      # no tempo final da maior, no texto da menor, tem um texto diferente do atual da menor\n      retorno[retorno$V4 == menor,4] = paste(retorno[retorno$V4 == menor,4], linha$V10)\n    }\n  \n  #repetir o processo anterior soh q no inicio do ao inv?s do final\n  menor = ifelse (localizarInicioMenor(retorno) == \"Top\", \"Top\", \"Bot\")\n  maior = ifelse (localizarInicioMenor(retorno) == \"Bot\", \"Top\", \"Bot\")\n  tempoDoMenor = retorno[retorno$V4 == menor,1]\n  linha = localizarIntervaloSimples(tempoDoMenor, maior)\n  x = linha$V10\n  if (length(x) > 0  )\n    if (linha$V10 != retorno[retorno$V4 == maior,4]){\n      # no tempo final da maior, no texto da menor, tem um texto diferente do atual da menor\n      retorno[retorno$V4 == maior,4] = paste(linha$V10, retorno[retorno$V4 == maior,4])\n\n    }\n  \n  return (retorno)\n}\n\nlocalizarIntervaloSimples <- function (tempo, indice){\n  colunas = c(2,3,4,10,11,12)\n  if (class(tempo) == \"numeric\") tempo = lubridate::seconds(tempo)\n  retorno = legenda[(legenda$V2 <= tempo) & (legenda$V3 >= tempo), colunas]\n  retorno = retorno[retorno$V4 == indice,]  \n  return (retorno)\n}\n\n#top ou bot?\nlocalizarMaior <- function (registro){\n  return (ifelse( horaFinalMaior (registro) == registro[registro$V4 == \"Bot\",6], \"Bot\", \"Top\"))\n}\n\n#top ou bot?\nlocalizarInicioMenor <- function (registro){\n  return (ifelse( horaInicialMenor (registro) == registro[registro$V4 == \"Bot\",5], \"Bot\", \"Top\"))\n}\n\nhoraInicialMenor <- function(itemLista){\n  if (nrow(itemLista) == 1)\n    return (itemLista$V12)\n  else\n    return(ifelse (itemLista$V2[1] > itemLista$V2[2], itemLista$V11[2], \n                   itemLista$V11[1] ))\n}\n\nhoraFinalMaior <- function(itemLista){\n  if (nrow(itemLista) == 1)\n    return (itemLista$V12)\n  else\n    return(ifelse (itemLista$V3[1] > itemLista$V3[2], itemLista$V12[1], \n                   itemLista$V12[2] ))\n}\n# lista[[29]]$V2[2] = 1976.282125\n\ncarregarLista <- function (){\n  lista <- read.table(arquivoLista, header = F) # arquivo que cont?m os pontos marcados pelo VLC\n  lista = lapply (lista, lubridate::seconds)\n  lista = lapply(lista[[1]], localizarIntervalo)\n  return (lista)\n}\n\ninserirParametros <- function (tempoInicial, tempoFinal, arquivoDestino){\n  if (audioOnly)\n    strffmpeg = \"\\\"%s\\\" -i \\\"%s\\\" -ab 320k -ac 2 -ar 44100 -vn -ss %s -t %f \\\"%s\\\"\"\n  else\n    strffmpeg = \"\\\"%s\\\" -i \\\"%s\\\" -vcodec copy -acodec copy -ss %s -t %f \\\"%s\\\"\"\n  sprintf(strffmpeg,\n          ffmpeg, arquivoOrigem, tempoInicial, ifelse(tempoFinal <= 2, 2, tempoFinal), \n          arquivoDestino)\n          #substr(arquivoDestino, 1, nchar(arquivoOrigem) -4), extensao)\n  #alternativas pra MKV:\n  #ffmpeg -i output3.mkv -t 00:04:20 -c:v copy -c:a copy output-cut.mkv\n  #ffmpeg -i output3.mkv -t 00:04:20 -c:v libx264 -c:a libfaac output-cut.mkv (sync prob)\n}\n\nhoraInicialMenor <- function(itemLista){\n  if (nrow(itemLista) == 1)\n    return (itemLista$V11)\n  else\n    return(ifelse (itemLista$V2[1] > itemLista$V2[2], itemLista$V11[2], \n                   itemLista$V11[1] ))\n}\n\ntempoAAdicionar <- function(itemLista){\n  if (nrow(itemLista) == 1) return (as.numeric(hms(itemLista$V12) - \n                                                 hms(itemLista$V11)) + 1.2)\n  else{\n    maior = ifelse (itemLista$V3[1] > itemLista$V3[2], itemLista$V12[1], itemLista$V12[2])\n    return(as.numeric(hms(maior)) -  as.numeric(hms(horaInicialMenor(itemLista))) +1.2)\n  }\n}\n\nloadInicial <- function (){\n  carregarPrefs()\n  legenda <<- carregarLegenda()\n  lista <<- carregarLista()\n}\n#' Gera o meterial\n#'\n#' @param audioOnly = T boolean\n#' @param modoDev = F boolean\n#' @return Material gerado\n#' @examples\n#' gerarMaterial(T, T)\n#' gerarMaterial(T, F)\ngerarMaterial <- function (audioOnly =T, modoDev = F){\n  loadInicial()\n  audioOnly <<- audioOnly\n  extensao = ifelse(audioOnly, \"mp3\",\n                    substr(arquivoOrigem, nchar(arquivoOrigem) -2, nchar(arquivoOrigem)))\n  listaAnki = matrix(ncol = 3)\n  for (i in 1:length(lista)){\n    if (nrow(lista[[i]]) == 0) next;\n    x = lista[[i]]\n    arquivoSaida = sprintf (\"saida-%i.%s\", i, extensao)\n    saida = sprintf (\"%s/%s\", diretorioSaida, arquivoSaida)\n    campoAnkiArquivo = sprintf(\"[sound:%s]\", arquivoSaida)\n    if (modoDev)\n      print(inserirParametros(horaInicialMenor(x), tempoAAdicionar(x), saida))\n    else\n      system(inserirParametros(horaInicialMenor(x), tempoAAdicionar(x), saida))\n    \n    if (nrow(lista[[i]]) == 1) \n      linha = c(as.character(x$V10), as.character(x$V10), campoAnkiArquivo)\n    else\n      linha = c(as.character(x$V10[x$V4 == \"Bot\"]), as.character(x$V10[x$V4 == \"Top\"]), campoAnkiArquivo)\n    listaAnki = rbind (listaAnki, linha)\n  }\n  setwd(diretorioSaida)\n  write.table(listaAnki[-1,], \"listaAnki.txt\", sep=\"\\t\", quote=F, \n              col.names=F, row.names=F, fileEncoding=\"UTF-8\")\n  salvarPastasPassadas()\n}\n\n# DO ARQUIVO PREFERENCIAS\nmudarPasta <- function (){\n  mainDir <- \"~/\"\n  subdir <- \"langlearn/\"\n  setwd(mainDir)\n  if (file.exists(subdir)){\n    setwd(subdir)\n  }else {\n    dir.create(file.path(mainDir, subdir), showWarnings = FALSE)\n    setwd(file.path(mainDir, subdir))\n  }\n  #showWarnings = TRUE\n}\n\nsalvarPastasPassadas <- function()  {\n  mudarPasta()\n  write.table (diretorioSaida, \"diretorioSaida.csv\", row.names = F, col.names =F)\n  write.table (arquivoLista, \"arquivoLista.csv\", row.names = F, col.names =F)\n  write.table (arquivoOrigem, \"arquivoOrigem.csv\", row.names = F, col.names =F)\n  write.table (arquivoLegenda, \"arquivoLegenda.csv\", row.names = F, col.names =F)\n  write.table (ffmpeg, \"ffmpeg.csv\", row.names = F, col.names =F)\n}\n\ncarregarDir <- function (variavel){\n  mudarPasta()\n  retorno = \"\"\n  if (file.exists(paste0(variavel, \".csv\")))\n    retorno = read.table(paste0(variavel, \".csv\"), row.names = NULL, stringsAsFactors = F)$V1\n  return (retorno)\n}\n",
    "created" : 1429233906326.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2024051564",
    "id" : "15532032",
    "lastKnownWriteTime" : 1429336606,
    "path" : "J:/dox/GitHub/LangLearn/R/manipulacao.R",
    "project_path" : "R/manipulacao.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}