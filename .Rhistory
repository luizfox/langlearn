dset = read.csv ("J:/dropbox/Dropbox/diversos/clima teresina/clima-manipulado 2.csv")
head(dset$tempmaxima)
names(dset)
names(dset$umidaderelativaminima)
head(dset$umidaderelativaminima)
cor(dset$mediatemporvalho, dset$pressaoatualvapor)
cor (dset$umida, dset$umidaderelativaminima)
cor (dset$tempmaxima, dset$umidaderelativaminima)
plot (dset$tempmaxima, dset$umidaderelativaminima)
cor (dset$tempmaxima, dset$umidaderelativaminima)
plot (dset$tempmaxima, dset$umidaderelativaminima)
plot (dset$tempmaxima, dset$umidaderelativaminima, col=dset$precipitacao)
dset = read.csv ("J:/dropbox/Dropbox/diversos/clima teresina/clima-manipulado 3.csv")
plot (dset$dadotempmaxima, dset$dadoumidaderelativaminima, col=dset$precipitacao)
dset = read.csv ("J:/dropbox/Dropbox/diversos/clima teresina/clima-manipulado 2.csv")
plot (dset$tempmaxima, dset$umidaderelativaminima, col=dset$precipitacao)
lm1 = lm (dset$tempmaxima ~ dset$umidaderelativaminima)
summary(lm1)
lm1
confint(lm1)
confint(lm1, level=0.95)
confint(lm1, level=0.90)
confint(lm1)
confint(lm1, level=0.90)
confint(lm1, level=0.70)
dset = read.csv ("J:/dropbox/Dropbox/diversos/clima teresina/clima-manipulado 3.csv")
lm2 = lm (dset$dadotempmaxima ~ dset$precipitacao)
anova(lm2)
lm2
summary(lm2)
lm2
library(rattle)
rattle()
library (sqldf)
install.packages
install.packages(sqldf)
install.packages("sqldf")
library (sqldf)
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="acs.csv")
?read.csv
arquivo = read.csv ("acs.csv")
head(arquivo)
summary(arquivo)
class(arquivo)
sqldf("select * from arquivo")
names(arquivo)
sqldf("select pwgtp1 from arquivo where AGEP < 50")
library(XML)
download.file ("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", destfile="8110.for")
arquivo = read.fortran("8110.for")
?read.fortran
arquivo = read.fortran("8110.for", "F4.2")
arquivo = read.fortran("8110.for", c("F4.2"))
plot (rnorm(100), rnorm(100))
library(Rook)
library(Rfacebook)
fb_oauth <- fbOAuth(app_id="646992762020791", app_secret="312ab075acc86171900960b1205f3d5f", extended_permissions = TRUE)
getwd()
save(fb_oauth, file="fb_oauth")
me <- getUsers("me", token=fb_oauth)
load("fb_oauth")
me <- getUsers("me", token=fb_oauth)
token = "CAACEdEose0cBAIa0Y1drbZB75j0ZA0y5JY90w04oBnbV3W4W1nikP8o5w0hLwxZBdUmagLIxNTfSoiAODbrV7XvVhXknPVI0X6laVHOT3xgvFVp4Mqbxqh8OQ7XN4nI6u5soAeLgZA9hFJlUEfPRhf7paYa9PiWQcis49xYZCQQb1rC1ZCPrg1a7iq1jzqmSkkmRuUt0zOXlzTmgb9wwYbRO2LhxIz1dS76qdnFKyGIgZDZD"
me <- getUsers("me", token=token)
me
?getCheckins
getCheckins(679710252111188, token=token)
getCheckins("679710252111188", token=token)
my_checkins <- getCheckins(user="me", token=token)
my_friends <- getFriends(token=token, simplify=FALSE)
getLikes("me", token)
getLikes("me", token=token)
getLikes("me", token=token)
my_checkins <- getCheckins(user="me", token=token)
head(my_checkins)
my_checkins
my_friends <- getFriends(token=token, simplify=FALSE)
head(my_friends)
my_friends <- getFriends(token=token, simplify=T)
head(my_friends)
getLikes("me", token=token)
head(my_friends)
head(my_friends)
my_friends <- getFriends(token=token, simplify=T, user="me")
my_friends <- getFriends(token=token, simplify=T)
head(my_friends)
net = getNetwork(token, format = "edgelist", verbose = TRUE)
net = getNetwork(token, verbose = TRUE)
getNetwork(token=fb_oauth, format="adj.matrix")
getNetwork(token=token, format="adj.matrix")
news = getNewsfeed(token, n = 200)
token = "CAACEdEose0cBAFZCK2ZBRsLZBfdHTolMa8UCE4jMtoOd1ZBz5ZCapXZAG25Jl2xe5hzXQ9cUHMJCmuWRPyzLNrKjGqSGjvkBFxDhOvM1ZCICtPtOUGRIpODgGl9hG0pWVLEsIuACyTXLqsyKVhG3SFZAKc7CTGiKSwBdlC9F3gcKh9jZBFZBbbvAUqJ73Xw4xZAUZADkdNp6mDUnLsDGeCZBlzLVXOBZBiItJEZC57whlUgfdP9ugZDZD"
my_friends <- getFriends(token=token, simplify=T)
head(my_friends)
token = "CAACEdEose0cBAFZCK2ZBRsLZBfdHTolMa8UCE4jMtoOd1ZBz5ZCapXZAG25Jl2xe5hzXQ9cUHMJCmuWRPyzLNrKjGqSGjvkBFxDhOvM1ZCICtPtOUGRIpODgGl9hG0pWVLEsIuACyTXLqsyKVhG3SFZAKc7CTGiKSwBdlC9F3gcKh9jZBFZBbbvAUqJ73Xw4xZAUZADkdNp6mDUnLsDGeCZBlzLVXOBZBiItJEZC57whlUgfdP9ugZDZD"
my_friends <- getFriends(token=token, simplify=T)
news = getNewsfeed(token, n = 200)
head(news)
fb_page <- getPage(page="facebook", token=token)
head(fb_page)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_friends_info
table(my_friends_info$relationship_status)
fb.posts <- searchFacebook( "dilma", token=fb_oauth, n=100)
fb.posts <- searchFacebook( "dilma", token=token, n=100)
head(fb.posts)
fb.users <- getUsers( fb.posts$from_id, token=token )
table(fb.users$gender)
fb.posts <- searchFacebook( "aecio", token=token, n=100)
fb.users <- getUsers( fb.posts$from_id, token=token )
table(fb.users$gender)
getFQL("SELECT uid2 FROM friend WHERE uid1=me()", token)
getFQL("SELECT uid2 FROM friend WHERE uid1=me", token)
fb.posts <- searchFacebook( "Embrapa", token=token, n=100)
fb.users <- getUsers( fb.posts$from_id, token=token )
table(fb.users$gender)
head(fb.posts)
table(fb.users$locale)
getFQL("SELECT uid2 FROM friend WHERE uid1=me", token)
fb.posts <- searchFacebook( "Dilma", token=token, n=100)
head(fb.posts)
head(fb.posts$message)
fb.posts$message
my_friends <- getFriends(token=token, simplify=T)
head(my_friends)
head(my_friends)
my_friends <- getFriends(token=token, simplify=F)
head(my_friends)
my_friends <- getFriends(token=token, simplify=F)
getFQL("SELECT uid2 FROM friend WHERE uid1=me", token)
load("fb_oauth")
head(fb_oauth)
getFQL("SELECT uid2 FROM friend WHERE uid1=me", fb_oauth)
getFQL("SELECT uid2 FROM friend WHERE uid1=me", fb_oauth)
getFQL("SELECT uid2 FROM friend WHERE uid1=me", fb_oauth)
rnorm = 123
?load
?confint
x = rnorm(100)
confint(x)
x = rnorm(100)
library(plotrix)
install.packages("plotrix")
library(plotrix)
std.error(x)
(0.0364 + 0.0634)
(0.0364 + 0.0634) /2
install.packages("caret")
library(caret)
load(spam)
library(kernlab)
load(spam)
library(caret)
data(spam)
library(kernlab)
data(spam)
head(spam)
inTreino = createDataPartition(y=spam$type, p=0.75, list=F)
inTreino = createDataPartition(y=spam$type, p=0.75, list=F)
treino = spam[inTreino]
teste = spam[-inTreino]
dim(treino)
length(treino)
length(teste)
treino = spam[inTreino,]
teste = spam[-inTreino,]
length(treino)
length(teste)
dim(treino)
dim(teste)
set.seed (32343)
modelFit = train(type ~., data = treino, method = "glm")
warnings()
modelFit
??caret
?train
names(getModelInfo())
modelFit
modelFit$finalModel
prediction=predict(modelFit, newdata=testing)
prediction=predict(modelFit, newdata=teste)
teste
prediction
confusionMatrix(prediction, teste$type)
?solve
library(deSolve)
install.packages("deSolve")
vignette("deSolve")
0.85*0.15
2.05 * sqrt (0.1275 / 544)
2.05 * sqrt (0.1275 / 278)
2.05 * sqrt (0.1275 / 33)
2.05 * sqrt (0.1275 / 1068)
install.packages("Rcmdr")
library(Rcmdr)
install.packages("Deducer")
library(Deducer)
install.packages("rJava")
library(Deducer)
library(deducer)
install.packages(c("JGR","Deducer","DeducerExtras"))
library(JGR)
version()
Version()
R.Version()
library(JGR)
install.packages("rJava")
library(rJava)
library(rJava)
library(JGR)
JGR()
install.packages("rattle")
rattle()
library(rattle)
rattle()
library(MASS)
attach(Boston)
head(boston)
head(Boston)
lm1 = lm (medv~poly(lstat, 2))
lm1 = lm (medv~poly(lstat, 5))
plot(lm1)
plot(lstat, medv)
abline(lm1)
abline(lm1, col="red")
dbinom(1, 10, 0.07)
1- dbinom(1, 10, 0.07)
1- dbinom(1:10, 10, 0.07)
sum(dbinom(1:10, 10, 0.07))
sum(dbinom(1:10, 10, 0.07))
dbinom(35, 3000000 ,0.00001)
dbinom(35:3000000, 3000000 ,0.00001)
sum(dbinom(35:3000000, 3000000 ,0.00001))
??tree
lubridate::hms("00:01:59")
lubridate::hms("00:01:59.233")
lubridate::hms("00:01:59.233") - lubridate::hms("00:01:21.600")
lubridate::hms("00:02:08.409") - lubridate::hms("00:02:22.993")
lubridate::hms("00:01:43.884 ") - lubridate::hms("00:02:13.817")
lubridate::hms("00:01:39.338 ") - lubridate::hms("00:01:17.120")
library(lubridate)
###########################################################
# VARIAVEIS A SEREM ALTERADAS DE ACORDO COM O AMBIENTE
###########################################################
ffmpeg = "J:/downloads/legendas/ffmpeg-20150402-git-d759844-win64-static/bin/ffmpeg.exe"
arquivoOrigem = "E:/Filmes/Mommy 2014 1080p BluRay x264 French AAC - Ozlem/Mommy 2014 1080p BluRay x264 French AAC - Ozlem.mp4"
diretorioSaida = "E:/Filmes/Mommy 2014 1080p BluRay x264 French AAC - Ozlem/build 1"
pastaLegendaELista = "E:/Filmes/Mommy 2014 1080p BluRay x264 French AAC - Ozlem"
#pastaLegendaELista = "J:/dropbox/Dropbox/diversos/legendas/GoT"
arquivoLegenda = "mommy.unidas.ass"
modoDev = T
audioOnly = F
###########################################################
library(lubridate)
library (rChoiceDialogs)
ffmpeg = "J:/downloads/legendas/ffmpeg-20150402-git-d759844-win64-static/bin/ffmpeg.exe"
modoDev = F
audioOnly = T
diretorioSaida = jchoose.dir(default = getwd(), caption = "Diretorio de saida", modal = canUseJavaModal())
setwd(diretorioSaida)
arquivoLista = jchoose.files(multi = F, caption = "Arquivo lista.txt")
arquivoOrigem = jchoose.files(multi = F, caption = "Arquivo de origem (filme)")
arquivoLegenda = jchoose.files(multi = F, caption = "Arquivo de legenda combinado")
extensao = ifelse(audioOnly, "mp3",
substr(arquivoOrigem, nchar(arquivoOrigem) -2, nchar(arquivoOrigem)))
legenda = read.fwf (arquivoLegenda,
widths= c(12, 12, 12, 3, 2, 4, 4, 4,1,1000), skip=18, fileEncoding="latin1")
head(legenda$V10)
legenda$V11 = substr(legenda$V2, 1,11); legenda$V12 = substr(legenda$V3, 1,11);
legenda$V2 = lubridate::hms(substr(legenda$V2, 1,11))
legenda$V3 = lubridate::hms(substr(legenda$V3, 1,11))
legenda$V10 = iconv(legenda$V10, from = "UTF-8", to="latin1")
legenda$V10 = substr(legenda$V10, 4,length(legenda$V10))
legenda$V10 = gsub("\n"," ",legenda$V10); legenda$V10 = gsub("\\N"," ",legenda$V10)
legenda$V10 = gsub("\\\\","",legenda$V10)
source ("localizarIntervalo")
commandArgs(trailingOnly = FALSE)
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)
other.name <- paste(sep="/", script.basename, "other.R")
print(paste("Sourcing",other.name,"from",script.name))
source(other.name)
other.name
initial.options
initial.options()
initial.options[]
dirname(sys.frame(1)$ofile)
dirname()
dirname(path = ".")
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
PATH <- dirname(frame_files[[length(frame_files)]])
commandArgs(trailingOnly = F)
my.own.path ()
knitr:::input_dir()
Sys.info()
dirname(parent.frame(2)$ofile)
(parent.frame(2)$ofile)
parent.frame(2)
parent.frame(2)$ofile
source ("localizarIntervalo.R")
setwd("J:/dox/GitHub/LangLearn")
source ("localizarIntervalo.R")
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarIntervalo(1992)
localizarIntervalo(2000)
localizarIntervalo(800)
localizarIntervalo(123)
lista = read.table(arquivoLista, header = F) # arquivo que cont?m os pontos marcados pelo VLC
lista = lapply (lista, lubridate::seconds)
lista
localizarIntervalo(676)
localizarIntervalo(676.4879)
localizarIntervalo(676.4)
localizarIntervalo(676)
localizarIntervalo(676.5)
lista
localizarIntervalo(676.5)
localizarIntervalo("676.5")
localizarIntervalo("676.5S")
localizarIntervalo(lubridate::seconds("676.5S"))
localizarIntervalo(lubridate::seconds("676.5"))
lista
localizarIntervalo(lubridate::seconds("119.48"))
lapply(lista[[1]], localizarIntervalo)
lista[20]
lista
localizarIntervalo(1184.88)
localizarIntervalo(1184)
localizarIntervalo(1184.4)
localizarIntervalo(1184.7)
localizarIntervalo(1184.8)
localizarIntervalo(1184.9)
localizarIntervalo(1185)
localizarIntervalo(1185.6)
localizarIntervalo(1185.9)
localizarIntervalo(1186)
localizarIntervalo(1187)
localizarIntervalo(1188)
localizarIntervalo(1189)
localizarIntervalo(1188.5)
localizarIntervalo(1188.1)
localizarIntervalo(1188.2)
localizarIntervalo(1188.3)
localizarIntervalo(1188.4)
localizarIntervalo(1188.5)
localizarIntervalo(1144)
localizarIntervalo(1145)
localizarIntervalo(1184.5)
localizarIntervalo(118)
localizarIntervalo(1148)
localizarIntervalo(1184.4)
localizarIntervalo(1186.4)
localizarIntervalo(1185)
lapply(lista[[1]], localizarIntervalo)
lista = lapply(lista[[1]], localizarIntervalo)
lista
lista[[1]]
lista[[33]]
lista[[33,2]]
lista[[33]]$V2
lista[[33]]$V2[1]
localizarIntervalo(lista[[33]]$V2[1])
lista[[33]]
lista
lista[[29]]
lista[29]$V2[1]
lista[29]$V2
lista[[29]$V2
lista[[29]]$V2
lista[[29]]$V2[1]
localizarIntervalo( lista[[29]]$V2[1])
localizarIntervalo( lista[[29]]$V2[2])
localizarIntervalo( 1976.282125)
localizarIntervalo( 1976.282125)
horaInicialMenor <- function(itemLista){
if (nrow(itemLista) == 1)
return (itemLista$V11)
else
return(ifelse (itemLista$V2[1] > itemLista$V2[2], itemLista$V11[2],
itemLista$V11[1] ))
}
tempoAAdicionar <- function(itemLista){
if (nrow(itemLista) == 1) return (as.numeric(hms(itemLista$V12) -
hms(itemLista$V11)) + 1.2)
else{
maior = ifelse (itemLista$V3[1] > itemLista$V3[2], itemLista$V12[1], itemLista$V12[2])
return(as.numeric(hms(maior)) -  as.numeric(hms(horaInicialMenor(itemLista))) +1.2)
}
}
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
horaInicialMenor <- function(itemLista){
if (nrow(itemLista) == 1)
return (itemLista$V11)
else
return(ifelse (itemLista$V2[1] > itemLista$V2[2], itemLista$V11[2],
itemLista$V11[1] ))
}
tempoAAdicionar <- function(itemLista){
if (nrow(itemLista) == 1) return (as.numeric(hms(itemLista$V12) -
hms(itemLista$V11)) + 1.2)
else{
maior = ifelse (itemLista$V3[1] > itemLista$V3[2], itemLista$V12[1], itemLista$V12[2])
return(as.numeric(hms(maior)) -  as.numeric(hms(horaInicialMenor(itemLista))) +1.2)
}
}
x = localizarIntervalo( 1976.282125)
x
tempoAAdicionar(x)
horaInicialMenor(x)
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarIntervalo( 1976.282125)
dim(z)
dim(x)
nrow(zx)
nrow(x)
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
x
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
horaFinalMaior(x)
x
horaInicialMenor(x)
x
x[x$V4 == "Bot"]
x[x$V4 == "Bot",]
x[x$V4 == "Bot",6]
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarMaior(x)
x
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarIntervalo( 1976.282125)
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarIntervalo( 1976.282125)
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarIntervalo( 1976.282125)
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarIntervalo( 1976.282125)
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarIntervalo( 1976.282125)
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarIntervalo( 1976.282125)
localizarIntervalo( 1976.282125)
localizarIntervalo( 1976.282125)
localizarIntervalo( 1976.282125)
lubridate::seconds( 1976.282125)
lubridate::hms( 1976.282125)
hms(lubridate::seconds( 1976.282125))
hms(( 1976.282125))
hms((" 1976.282125"))
hms(("1976.282125"))
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
localizarMaior <- function (registro){
return (ifelse( horaFinalMaior (registro) == registro[registro$V4 == "Bot",6], "Bot", "Top"))
}
x
x
localizarIntervalo( 1976.282125)
localizarIntervalo( 1976.282125. "Top")
localizarIntervalo( 1976.282125, "Top")
localizarIntervalo( 1976.282125, "Bot")
localizarIntervalo( 1975.282125, "Bot")
localizarIntervalo( 1975.282125, "Top")
localizarIntervalo( 1975, "Top")
localizarIntervalo( 1975, "Bot")
localizarIntervalo( 1975, "Top")
y = lubridate::seconds(1975)
y
rm (y)
tempo = lubridate::seconds(1975)
legenda[(legenda$V2 <= tempo) & (legenda$V3 >= tempo), colunas]
legenda[(legenda$V2 <= tempo) & (legenda$V3 >= tempo), c(2,3,4,10,11,12)]
legenda
localizarIntervalo( 1975, "Top")
legenda[1020]
legenda[1020,]
legenda[1020:1030,]
legenda[1015:1022,]
legenda[1020,]
legenda[1019:1021,]
legenda[1015:1022,]
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
source.with.encoding('J:/dox/GitHub/LangLearn/localizarIntervalo.R', encoding='UTF-8')
legenda[1015:1022,]
legenda = read.fwf (arquivoLegenda,
widths= c(12, 12, 12, 3, 2, 4, 4, 4,1,1000), skip=18, fileEncoding="latin1")
legenda[1015:1022,]
legenda$V10 = iconv(legenda$V10, from = "UTF-8", to="latin1")
legenda[1015:1022,]
legenda = read.fwf (arquivoLegenda,
widths= c(12, 12, 12, 3, 2, 4, 4, 4,1,1000), skip=18, fileEncoding="latin1")
legenda$V10 = iconv(legenda$V10, to = "UTF-8", from="latin1")
legenda[1015:1022,]
legenda$V10 = substr(legenda$V10, 4,length(legenda$V10))
legenda$V10 = gsub("\n"," ",legenda$V10); legenda$V10 = gsub("\\N"," ",legenda$V10)
legenda$V10 = gsub("\\\\","",legenda$V10)
legenda[1015:1022,]
